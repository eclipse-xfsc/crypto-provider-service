// Code generated by goa v3.12.3, DO NOT EDIT.
//
// signer HTTP server encoders and decoders
//
// Command:
// $ goa gen github.com/eclipse-xfsc/crypto-provider-service/design

package server

import (
	"context"
	"io"
	"net/http"

	signer "github.com/eclipse-xfsc/crypto-provider-service/gen/signer"
	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// EncodeNamespacesResponse returns an encoder for responses returned by the
// signer Namespaces endpoint.
func EncodeNamespacesResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, any) error {
	return func(ctx context.Context, w http.ResponseWriter, v any) error {
		res, _ := v.([]string)
		enc := encoder(ctx, w)
		body := res
		w.WriteHeader(http.StatusOK)
		return enc.Encode(body)
	}
}

// EncodeNamespaceKeysResponse returns an encoder for responses returned by the
// signer NamespaceKeys endpoint.
func EncodeNamespaceKeysResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, any) error {
	return func(ctx context.Context, w http.ResponseWriter, v any) error {
		res, _ := v.([]string)
		enc := encoder(ctx, w)
		body := res
		w.WriteHeader(http.StatusOK)
		return enc.Encode(body)
	}
}

// DecodeNamespaceKeysRequest returns a decoder for requests sent to the signer
// NamespaceKeys endpoint.
func DecodeNamespaceKeysRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (any, error) {
	return func(r *http.Request) (any, error) {
		var (
			namespace string
			xGroup    string

			params = mux.Vars(r)
		)
		namespace = params["namespace"]
		xGroupRaw := r.Header.Get("x-group")
		if xGroupRaw != "" {
			xGroup = xGroupRaw
		}
		payload := NewNamespaceKeysRequest(namespace, xGroup)

		return payload, nil
	}
}

// EncodeVerificationMethodResponse returns an encoder for responses returned
// by the signer VerificationMethod endpoint.
func EncodeVerificationMethodResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, any) error {
	return func(ctx context.Context, w http.ResponseWriter, v any) error {
		res, _ := v.(*signer.DIDVerificationMethod)
		enc := encoder(ctx, w)
		body := NewVerificationMethodResponseBody(res)
		w.WriteHeader(http.StatusOK)
		return enc.Encode(body)
	}
}

// DecodeVerificationMethodRequest returns a decoder for requests sent to the
// signer VerificationMethod endpoint.
func DecodeVerificationMethodRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (any, error) {
	return func(r *http.Request) (any, error) {
		var (
			body VerificationMethodRequestBody
			err  error
		)
		err = decoder(r).Decode(&body)
		if err != nil {
			if err == io.EOF {
				return nil, goa.MissingPayloadError()
			}
			return nil, goa.DecodePayloadError(err.Error())
		}

		var (
			namespace string
			key       string
			did       string

			params = mux.Vars(r)
		)
		namespace = params["namespace"]
		key = params["key"]
		did = params["did"]
		payload := NewVerificationMethodRequest(&body, namespace, key, did)

		return payload, nil
	}
}

// EncodeVerificationMethodsResponse returns an encoder for responses returned
// by the signer VerificationMethods endpoint.
func EncodeVerificationMethodsResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, any) error {
	return func(ctx context.Context, w http.ResponseWriter, v any) error {
		res, _ := v.([]*signer.DIDVerificationMethod)
		enc := encoder(ctx, w)
		body := NewVerificationMethodsResponseBody(res)
		w.WriteHeader(http.StatusOK)
		return enc.Encode(body)
	}
}

// DecodeVerificationMethodsRequest returns a decoder for requests sent to the
// signer VerificationMethods endpoint.
func DecodeVerificationMethodsRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (any, error) {
	return func(r *http.Request) (any, error) {
		var (
			body VerificationMethodsRequestBody
			err  error
		)
		err = decoder(r).Decode(&body)
		if err != nil {
			if err == io.EOF {
				return nil, goa.MissingPayloadError()
			}
			return nil, goa.DecodePayloadError(err.Error())
		}

		var (
			namespace string
			did       string

			params = mux.Vars(r)
		)
		namespace = params["namespace"]
		did = params["did"]
		payload := NewVerificationMethodsRequest(&body, namespace, did)

		return payload, nil
	}
}

// EncodeJwkPublicKeyResponse returns an encoder for responses returned by the
// signer JwkPublicKey endpoint.
func EncodeJwkPublicKeyResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, any) error {
	return func(ctx context.Context, w http.ResponseWriter, v any) error {
		res, _ := v.(any)
		enc := encoder(ctx, w)
		body := res
		w.WriteHeader(http.StatusOK)
		return enc.Encode(body)
	}
}

// DecodeJwkPublicKeyRequest returns a decoder for requests sent to the signer
// JwkPublicKey endpoint.
func DecodeJwkPublicKeyRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (any, error) {
	return func(r *http.Request) (any, error) {
		var (
			body JwkPublicKeyRequestBody
			err  error
		)
		err = decoder(r).Decode(&body)
		if err != nil {
			if err == io.EOF {
				return nil, goa.MissingPayloadError()
			}
			return nil, goa.DecodePayloadError(err.Error())
		}
		err = ValidateJwkPublicKeyRequestBody(&body)
		if err != nil {
			return nil, err
		}

		var (
			namespace string
			key       string

			params = mux.Vars(r)
		)
		namespace = params["namespace"]
		key = params["key"]
		payload := NewJwkPublicKeyRequest(&body, namespace, key)

		return payload, nil
	}
}

// EncodeCredentialProofResponse returns an encoder for responses returned by
// the signer CredentialProof endpoint.
func EncodeCredentialProofResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, any) error {
	return func(ctx context.Context, w http.ResponseWriter, v any) error {
		res, _ := v.(any)
		enc := encoder(ctx, w)
		body := res
		w.WriteHeader(http.StatusOK)
		return enc.Encode(body)
	}
}

// DecodeCredentialProofRequest returns a decoder for requests sent to the
// signer CredentialProof endpoint.
func DecodeCredentialProofRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (any, error) {
	return func(r *http.Request) (any, error) {
		var (
			body CredentialProofRequestBody
			err  error
		)
		err = decoder(r).Decode(&body)
		if err != nil {
			if err == io.EOF {
				return nil, goa.MissingPayloadError()
			}
			return nil, goa.DecodePayloadError(err.Error())
		}
		err = ValidateCredentialProofRequestBody(&body)
		if err != nil {
			return nil, err
		}
		payload := NewCredentialProofRequest(&body)

		return payload, nil
	}
}

// EncodePresentationProofResponse returns an encoder for responses returned by
// the signer PresentationProof endpoint.
func EncodePresentationProofResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, any) error {
	return func(ctx context.Context, w http.ResponseWriter, v any) error {
		res, _ := v.(any)
		enc := encoder(ctx, w)
		body := res
		w.WriteHeader(http.StatusOK)
		return enc.Encode(body)
	}
}

// DecodePresentationProofRequest returns a decoder for requests sent to the
// signer PresentationProof endpoint.
func DecodePresentationProofRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (any, error) {
	return func(r *http.Request) (any, error) {
		var (
			body PresentationProofRequestBody
			err  error
		)
		err = decoder(r).Decode(&body)
		if err != nil {
			if err == io.EOF {
				return nil, goa.MissingPayloadError()
			}
			return nil, goa.DecodePayloadError(err.Error())
		}
		err = ValidatePresentationProofRequestBody(&body)
		if err != nil {
			return nil, err
		}
		payload := NewPresentationProofRequest(&body)

		return payload, nil
	}
}

// EncodeCreateCredentialResponse returns an encoder for responses returned by
// the signer CreateCredential endpoint.
func EncodeCreateCredentialResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, any) error {
	return func(ctx context.Context, w http.ResponseWriter, v any) error {
		res, _ := v.(any)
		enc := encoder(ctx, w)
		body := res
		w.WriteHeader(http.StatusOK)
		return enc.Encode(body)
	}
}

// DecodeCreateCredentialRequest returns a decoder for requests sent to the
// signer CreateCredential endpoint.
func DecodeCreateCredentialRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (any, error) {
	return func(r *http.Request) (any, error) {
		var (
			body CreateCredentialRequestBody
			err  error
		)
		err = decoder(r).Decode(&body)
		if err != nil {
			if err == io.EOF {
				return nil, goa.MissingPayloadError()
			}
			return nil, goa.DecodePayloadError(err.Error())
		}
		err = ValidateCreateCredentialRequestBody(&body)
		if err != nil {
			return nil, err
		}

		var (
			xOrigin string
		)
		xOrigin = r.Header.Get("x-origin")
		if xOrigin == "" {
			err = goa.MergeErrors(err, goa.MissingFieldError("x-origin", "header"))
		}
		if err != nil {
			return nil, err
		}
		payload := NewCreateCredentialRequest(&body, xOrigin)

		return payload, nil
	}
}

// EncodeCreatePresentationResponse returns an encoder for responses returned
// by the signer CreatePresentation endpoint.
func EncodeCreatePresentationResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, any) error {
	return func(ctx context.Context, w http.ResponseWriter, v any) error {
		res, _ := v.(any)
		enc := encoder(ctx, w)
		body := res
		w.WriteHeader(http.StatusOK)
		return enc.Encode(body)
	}
}

// DecodeCreatePresentationRequest returns a decoder for requests sent to the
// signer CreatePresentation endpoint.
func DecodeCreatePresentationRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (any, error) {
	return func(r *http.Request) (any, error) {
		var (
			body CreatePresentationRequestBody
			err  error
		)
		err = decoder(r).Decode(&body)
		if err != nil {
			if err == io.EOF {
				return nil, goa.MissingPayloadError()
			}
			return nil, goa.DecodePayloadError(err.Error())
		}
		err = ValidateCreatePresentationRequestBody(&body)
		if err != nil {
			return nil, err
		}
		payload := NewCreatePresentationRequest(&body)

		return payload, nil
	}
}

// EncodeVerifyCredentialResponse returns an encoder for responses returned by
// the signer VerifyCredential endpoint.
func EncodeVerifyCredentialResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, any) error {
	return func(ctx context.Context, w http.ResponseWriter, v any) error {
		res, _ := v.(*signer.VerifyResult)
		enc := encoder(ctx, w)
		body := NewVerifyCredentialResponseBody(res)
		w.WriteHeader(http.StatusOK)
		return enc.Encode(body)
	}
}

// DecodeVerifyCredentialRequest returns a decoder for requests sent to the
// signer VerifyCredential endpoint.
func DecodeVerifyCredentialRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (any, error) {
	return func(r *http.Request) (any, error) {
		var (
			body VerifyCredentialRequestBody
			err  error
		)
		err = decoder(r).Decode(&body)
		if err != nil {
			if err == io.EOF {
				return nil, goa.MissingPayloadError()
			}
			return nil, goa.DecodePayloadError(err.Error())
		}
		err = ValidateVerifyCredentialRequestBody(&body)
		if err != nil {
			return nil, err
		}

		var (
			xFormat    string
			xNamespace *string
			xGroup     *string
		)
		xFormatRaw := r.Header.Get("x-format")
		if xFormatRaw != "" {
			xFormat = xFormatRaw
		} else {
			xFormat = "ldp_vc"
		}
		if !(xFormat == "ldp_vc" || xFormat == "vc+sd-jwt") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("x-format", xFormat, []any{"ldp_vc", "vc+sd-jwt"}))
		}
		xNamespaceRaw := r.Header.Get("x-namespace")
		if xNamespaceRaw != "" {
			xNamespace = &xNamespaceRaw
		}
		xGroupRaw := r.Header.Get("x-group")
		if xGroupRaw != "" {
			xGroup = &xGroupRaw
		}
		if err != nil {
			return nil, err
		}
		payload := NewVerifyCredentialRequest(&body, xFormat, xNamespace, xGroup)

		return payload, nil
	}
}

// EncodeVerifyPresentationResponse returns an encoder for responses returned
// by the signer VerifyPresentation endpoint.
func EncodeVerifyPresentationResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, any) error {
	return func(ctx context.Context, w http.ResponseWriter, v any) error {
		res, _ := v.(*signer.VerifyResult)
		enc := encoder(ctx, w)
		body := NewVerifyPresentationResponseBody(res)
		w.WriteHeader(http.StatusOK)
		return enc.Encode(body)
	}
}

// DecodeVerifyPresentationRequest returns a decoder for requests sent to the
// signer VerifyPresentation endpoint.
func DecodeVerifyPresentationRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (any, error) {
	return func(r *http.Request) (any, error) {
		var (
			body VerifyPresentationRequestBody
			err  error
		)
		err = decoder(r).Decode(&body)
		if err != nil {
			if err == io.EOF {
				return nil, goa.MissingPayloadError()
			}
			return nil, goa.DecodePayloadError(err.Error())
		}
		err = ValidateVerifyPresentationRequestBody(&body)
		if err != nil {
			return nil, err
		}

		var (
			xFormat string
		)
		xFormatRaw := r.Header.Get("x-format")
		if xFormatRaw != "" {
			xFormat = xFormatRaw
		} else {
			xFormat = "ldp_vc"
		}
		if !(xFormat == "ldp_vc" || xFormat == "vc+sd-jwt") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("x-format", xFormat, []any{"ldp_vc", "vc+sd-jwt"}))
		}
		if err != nil {
			return nil, err
		}
		payload := NewVerifyPresentationRequest(&body, xFormat)

		return payload, nil
	}
}

// EncodeSignResponse returns an encoder for responses returned by the signer
// Sign endpoint.
func EncodeSignResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, any) error {
	return func(ctx context.Context, w http.ResponseWriter, v any) error {
		res, _ := v.(*signer.SignResult)
		enc := encoder(ctx, w)
		body := NewSignOKResponseBody(res)
		w.WriteHeader(http.StatusOK)
		return enc.Encode(body)
	}
}

// DecodeSignRequest returns a decoder for requests sent to the signer Sign
// endpoint.
func DecodeSignRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (any, error) {
	return func(r *http.Request) (any, error) {
		var (
			body SignRequestBody
			err  error
		)
		err = decoder(r).Decode(&body)
		if err != nil {
			if err == io.EOF {
				return nil, goa.MissingPayloadError()
			}
			return nil, goa.DecodePayloadError(err.Error())
		}
		err = ValidateSignRequestBody(&body)
		if err != nil {
			return nil, err
		}
		payload := NewSignRequest(&body)

		return payload, nil
	}
}

// EncodeDidDocResponse returns an encoder for responses returned by the signer
// didDoc endpoint.
func EncodeDidDocResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, any) error {
	return func(ctx context.Context, w http.ResponseWriter, v any) error {
		res, _ := v.(*signer.DidResponse)
		enc := encoder(ctx, w)
		body := NewDidDocOKResponseBody(res)
		w.WriteHeader(http.StatusOK)
		return enc.Encode(body)
	}
}

// DecodeDidDocRequest returns a decoder for requests sent to the signer didDoc
// endpoint.
func DecodeDidDocRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (any, error) {
	return func(r *http.Request) (any, error) {
		var (
			xNamespace string
			xGroup     string
			xDid       string
			xEngine    string
		)
		xNamespaceRaw := r.Header.Get("x-namespace")
		if xNamespaceRaw != "" {
			xNamespace = xNamespaceRaw
		} else {
			xNamespace = "transit"
		}
		xGroupRaw := r.Header.Get("x-group")
		if xGroupRaw != "" {
			xGroup = xGroupRaw
		}
		xDidRaw := r.Header.Get("x-did")
		if xDidRaw != "" {
			xDid = xDidRaw
		} else {
			xDid = "did:web:localhost%3A:8080"
		}
		xEngineRaw := r.Header.Get("x-engine")
		if xEngineRaw != "" {
			xEngine = xEngineRaw
		} else {
			xEngine = "transit"
		}
		payload := NewDidDocDidRequest(xNamespace, xGroup, xDid, xEngine)

		return payload, nil
	}
}

// EncodeDidListResponse returns an encoder for responses returned by the
// signer didList endpoint.
func EncodeDidListResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, any) error {
	return func(ctx context.Context, w http.ResponseWriter, v any) error {
		res, _ := v.(*signer.DidListResponse)
		enc := encoder(ctx, w)
		body := NewDidListOKResponseBody(res)
		w.WriteHeader(http.StatusOK)
		return enc.Encode(body)
	}
}

// DecodeDidListRequest returns a decoder for requests sent to the signer
// didList endpoint.
func DecodeDidListRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (any, error) {
	return func(r *http.Request) (any, error) {
		var (
			xNamespace string
			xGroup     string
			xEngine    string
			err        error
		)
		xNamespace = r.Header.Get("x-namespace")
		if xNamespace == "" {
			err = goa.MergeErrors(err, goa.MissingFieldError("x-namespace", "header"))
		}
		xGroupRaw := r.Header.Get("x-group")
		if xGroupRaw != "" {
			xGroup = xGroupRaw
		}
		xEngineRaw := r.Header.Get("x-engine")
		if xEngineRaw != "" {
			xEngine = xEngineRaw
		} else {
			xEngine = "transit"
		}
		if err != nil {
			return nil, err
		}
		payload := NewDidListRequest(xNamespace, xGroup, xEngine)

		return payload, nil
	}
}

// EncodeDidConfigurationResponse returns an encoder for responses returned by
// the signer DidConfiguration endpoint.
func EncodeDidConfigurationResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, any) error {
	return func(ctx context.Context, w http.ResponseWriter, v any) error {
		res, _ := v.(any)
		enc := encoder(ctx, w)
		body := res
		w.WriteHeader(http.StatusOK)
		return enc.Encode(body)
	}
}

// DecodeDidConfigurationRequest returns a decoder for requests sent to the
// signer DidConfiguration endpoint.
func DecodeDidConfigurationRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (any, error) {
	return func(r *http.Request) (any, error) {
		var (
			body DidConfigurationRequestBody
			err  error
		)
		err = decoder(r).Decode(&body)
		if err != nil {
			if err == io.EOF {
				return nil, goa.MissingPayloadError()
			}
			return nil, goa.DecodePayloadError(err.Error())
		}
		err = ValidateDidConfigurationRequestBody(&body)
		if err != nil {
			return nil, err
		}

		var (
			xNamespace string
			xGroup     string
			xOrigin    string
			xDid       *string
			xNonce     *string
		)
		xNamespace = r.Header.Get("x-namespace")
		if xNamespace == "" {
			err = goa.MergeErrors(err, goa.MissingFieldError("x-namespace", "header"))
		}
		xGroupRaw := r.Header.Get("x-group")
		if xGroupRaw != "" {
			xGroup = xGroupRaw
		}
		xOrigin = r.Header.Get("x-origin")
		if xOrigin == "" {
			err = goa.MergeErrors(err, goa.MissingFieldError("x-origin", "header"))
		}
		xDidRaw := r.Header.Get("x-did")
		if xDidRaw != "" {
			xDid = &xDidRaw
		}
		xNonceRaw := r.Header.Get("x-nonce")
		if xNonceRaw != "" {
			xNonce = &xNonceRaw
		}
		if err != nil {
			return nil, err
		}
		payload := NewDidConfiguration2(&body, xNamespace, xGroup, xOrigin, xDid, xNonce)

		return payload, nil
	}
}

// EncodeJwksResponse returns an encoder for responses returned by the signer
// Jwks endpoint.
func EncodeJwksResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, any) error {
	return func(ctx context.Context, w http.ResponseWriter, v any) error {
		res, _ := v.(*signer.JwksResponse)
		enc := encoder(ctx, w)
		body := NewJwksOKResponseBody(res)
		w.WriteHeader(http.StatusOK)
		return enc.Encode(body)
	}
}

// DecodeJwksRequest returns a decoder for requests sent to the signer Jwks
// endpoint.
func DecodeJwksRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (any, error) {
	return func(r *http.Request) (any, error) {
		var (
			xNamespace string
			xGroup     *string
			xEngine    string
			err        error
		)
		xNamespace = r.Header.Get("x-namespace")
		if xNamespace == "" {
			err = goa.MergeErrors(err, goa.MissingFieldError("x-namespace", "header"))
		}
		xGroupRaw := r.Header.Get("x-group")
		if xGroupRaw != "" {
			xGroup = &xGroupRaw
		}
		xEngineRaw := r.Header.Get("x-engine")
		if xEngineRaw != "" {
			xEngine = xEngineRaw
		} else {
			xEngine = "transit"
		}
		if err != nil {
			return nil, err
		}
		payload := NewJwksRequest(xNamespace, xGroup, xEngine)

		return payload, nil
	}
}

// marshalSignerDIDVerificationMethodToDIDVerificationMethodResponse builds a
// value of type *DIDVerificationMethodResponse from a value of type
// *signer.DIDVerificationMethod.
func marshalSignerDIDVerificationMethodToDIDVerificationMethodResponse(v *signer.DIDVerificationMethod) *DIDVerificationMethodResponse {
	res := &DIDVerificationMethodResponse{
		ID:           v.ID,
		Type:         v.Type,
		Controller:   v.Controller,
		PublicKeyJwk: v.PublicKeyJwk,
	}

	return res
}

// marshalSignerDIDVerificationMethodToDIDVerificationMethodResponseBody builds
// a value of type *DIDVerificationMethodResponseBody from a value of type
// *signer.DIDVerificationMethod.
func marshalSignerDIDVerificationMethodToDIDVerificationMethodResponseBody(v *signer.DIDVerificationMethod) *DIDVerificationMethodResponseBody {
	if v == nil {
		return nil
	}
	res := &DIDVerificationMethodResponseBody{
		ID:           v.ID,
		Type:         v.Type,
		Controller:   v.Controller,
		PublicKeyJwk: v.PublicKeyJwk,
	}

	return res
}

// marshalSignerServiceEndpointToServiceEndpointResponseBody builds a value of
// type *ServiceEndpointResponseBody from a value of type
// *signer.ServiceEndpoint.
func marshalSignerServiceEndpointToServiceEndpointResponseBody(v *signer.ServiceEndpoint) *ServiceEndpointResponseBody {
	if v == nil {
		return nil
	}
	res := &ServiceEndpointResponseBody{
		ID:              v.ID,
		Type:            v.Type,
		ServiceEndpoint: v.ServiceEndpoint,
	}

	return res
}

// marshalSignerDidListResponseItemToDidListResponseItemResponseBody builds a
// value of type *DidListResponseItemResponseBody from a value of type
// *signer.DidListResponseItem.
func marshalSignerDidListResponseItemToDidListResponseItemResponseBody(v *signer.DidListResponseItem) *DidListResponseItemResponseBody {
	res := &DidListResponseItemResponseBody{
		Name: v.Name,
		Did:  v.Did,
	}

	return res
}
