// Code generated by goa v3.12.3, DO NOT EDIT.
//
// signer service
//
// Command:
// $ goa gen github.com/eclipse-xfsc/crypto-provider-service/design

package signer

import (
	"context"
)

// Signer service makes digital signatures and proofs for verifiable
// credentials and presentations.
type Service interface {
	// Namespaces returns all keys namespaces, which corresponds to enabled Vault
	// transit engines.
	Namespaces(context.Context) (res []string, err error)
	// NamespaceKeys returns all keys in a given namespace.
	NamespaceKeys(context.Context, *NamespaceKeysRequest) (res []string, err error)
	// VerificationMethod returns a single public key formatted as DID verification
	// method for a given namespace, key and did. When did:jwk is set for did, a
	// did:jwk is generated from the key.
	VerificationMethod(context.Context, *VerificationMethodRequest) (res *DIDVerificationMethod, err error)
	// VerificationMethods returns all public keys in a given namespace. The result
	// is formatted as array of DID verification methods with their controller
	// attribute being the given DID in the request.
	VerificationMethods(context.Context, *VerificationMethodsRequest) (res []*DIDVerificationMethod, err error)
	// JwkPublicKey returns public key by name and namespace.
	JwkPublicKey(context.Context, *JwkPublicKeyRequest) (res any, err error)
	// CredentialProof adds a proof to a given Verifiable Credential.
	CredentialProof(context.Context, *CredentialProofRequest) (res any, err error)
	// PresentationProof adds a proof to a given Verifiable Presentation.
	PresentationProof(context.Context, *PresentationProofRequest) (res any, err error)
	// CreateCredential creates VC with proof from raw JSON data.
	CreateCredential(context.Context, *CreateCredentialRequest) (res any, err error)
	// CreatePresentation creates VP with proof from raw JSON data.
	CreatePresentation(context.Context, *CreatePresentationRequest) (res any, err error)
	// VerifyCredential verifies the proof of a Verifiable Credential.
	VerifyCredential(context.Context, *VerifyCredentialRequest) (res *VerifyResult, err error)
	// VerifyPresentation verifies the proof of a Verifiable Presentation.
	VerifyPresentation(context.Context, *VerifyPresentationRequest) (res *VerifyResult, err error)
	// Sign creates digital signature on base64 encoded binary data.
	Sign(context.Context, *SignRequest) (res *SignResult, err error)
	// DidDoc implements didDoc.
	DidDoc(context.Context, *DidRequest) (res *DidResponse, err error)
	// DidList implements didList.
	DidList(context.Context, *DidListRequest) (res *DidListResponse, err error)
	// Creates did configuration.
	DidConfiguration(context.Context, *DidConfiguration2) (res any, err error)
	// Jwks implements Jwks.
	Jwks(context.Context, *JwksRequest) (res *JwksResponse, err error)
}

// ServiceName is the name of the service as defined in the design. This is the
// same value that is set in the endpoint request contexts under the ServiceKey
// key.
const ServiceName = "signer"

// MethodNames lists the service method names as defined in the design. These
// are the same values that are set in the endpoint request contexts under the
// MethodKey key.
var MethodNames = [16]string{"Namespaces", "NamespaceKeys", "VerificationMethod", "VerificationMethods", "JwkPublicKey", "CredentialProof", "PresentationProof", "CreateCredential", "CreatePresentation", "VerifyCredential", "VerifyPresentation", "Sign", "didDoc", "didList", "DidConfiguration", "Jwks"}

// CreateCredentialRequest is the payload type of the signer service
// CreateCredential method.
type CreateCredentialRequest struct {
	// Issuer DID of the Verifiable Credential.
	Issuer *string
	// Key namespace.
	Namespace string
	// Key to use for the proof signature.
	Key string
	// Raw JSON that will be the VC subject.
	CredentialSubject any
	// Additional JSONLD contexts to be specified in the VC.
	Context []string
	// Group identifies a group of keys within a namespace.
	Group string
	// identifies the format of the credential.
	Format string
	// Proof challenge
	Nonce *string
	// Append Status
	Status *bool
	// Origin of call
	XOrigin string
	// Type of signature. For sd-jwt is it automatically selected.
	SignatureType string
	// Type(s) of the credential. Just first one for sd-jwt used.
	Type []string
	// Disclosed Attributes
	DisclosureFrame []string
	// Holder Binding
	Holder *string
}

// CreatePresentationRequest is the payload type of the signer service
// CreatePresentation method.
type CreatePresentationRequest struct {
	// Issuer DID of the Verifiable Presentation.
	Issuer *string
	// Key namespace.
	Namespace string
	// Key to use for the proof signature.
	Key string
	// Raw JSON to be included inside the VP as Verifiable Credential.
	Data []any
	// Additional JSONLD contexts to be specified in the VP.
	Context []string
	// Group identifies a group of keys within a namespace.
	Group string
	// Proof challenge
	Nonce *string
	// Type of signature. For sd-jwt is it automatically selected.
	SignatureType string
}

// CredentialProofRequest is the payload type of the signer service
// CredentialProof method.
type CredentialProofRequest struct {
	// Key namespace.
	Namespace string
	// Key to use for the proof signature (optional).
	Key string
	// Verifiable Credential in JSON format or as sdjwt.
	Credential any
	// Group identifies a group of keys within a namespace.
	Group string
	// identifies the format of the credential.
	Format string
	// Proof challenge
	Nonce *string
	// Type of signature.For sd-jwt is it automatically selected.
	SignatureType string
	// Disclosed Attributes
	DisclosureFrame []string
}

// Public Key represented as DID Verification Method.
type DIDVerificationMethod struct {
	// ID of verification method.
	ID string
	// Type of verification method key.
	Type string
	// Controller of verification method specified as DID.
	Controller string
	// Public Key encoded in JWK format.
	PublicKeyJwk any
}

// DidConfiguration2 is the payload type of the signer service DidConfiguration
// method.
type DidConfiguration2 struct {
	// Namespace.
	XNamespace string
	// Group.
	XGroup string
	// did for the Configuration
	XDid *string
	// origin for the configuration.
	XOrigin string
	// Proof challenge
	XNonce *string
	// Type of signature
	XSignatureType string
}

// DidListRequest is the payload type of the signer service didList method.
type DidListRequest struct {
	// Namespace.
	XNamespace string
	// Group.
	XGroup string
	// Engine which shall be used. Eg transit or transit;kv or kv
	XEngine string
}

// DidListResponse is the result type of the signer service didList method.
type DidListResponse struct {
	// did jwk list of keys
	List []*DidListResponseItem
}

type DidListResponseItem struct {
	// name of the key.
	Name string
	// DID JWK of key
	Did string
}

// DidRequest is the payload type of the signer service didDoc method.
type DidRequest struct {
	// Namespace.
	XNamespace string
	// Group.
	XGroup string
	// did which is used for controller and id
	XDid string
	// Engine which shall be used. Eg transit or transit;kv or kv
	XEngine string
}

// DidResponse is the result type of the signer service didDoc method.
type DidResponse struct {
	// did of the document
	ID string
	// controler of the document
	Controller string
	// methods of the document
	VerificationMethod []*DIDVerificationMethod
	// serviceendpoints
	Service []*ServiceEndpoint
}

// JwkPublicKeyRequest is the payload type of the signer service JwkPublicKey
// method.
type JwkPublicKeyRequest struct {
	// Key namespace.
	Namespace string
	// Key name.
	Key string
	// Group identifies a group of keys within a namespace.
	Group string
	// Engine which shall be used. Eg transit or transit;kv or kv
	Engine string
}

// JwksRequest is the payload type of the signer service Jwks method.
type JwksRequest struct {
	// Namespace.
	XNamespace string
	// Group.
	XGroup *string
	// Engine which shall be used. Eg transit or transit;kv or kv
	XEngine string
}

// JwksResponse is the result type of the signer service Jwks method.
type JwksResponse struct {
	// List of jwk
	Keys []any
}

// NamespaceKeysRequest is the payload type of the signer service NamespaceKeys
// method.
type NamespaceKeysRequest struct {
	// Namespace for signing keys.
	Namespace string
	// Group identifies a group of keys within a namespace.
	XGroup string
}

// PresentationProofRequest is the payload type of the signer service
// PresentationProof method.
type PresentationProofRequest struct {
	// Issuer DID used to specify proof verification info.
	Issuer *string
	// Key namespace.
	Namespace string
	// Key to use for the proof signature.
	Key string
	// Verifiable Presentation in JSON format.
	Presentation any
	// Group identifies a group of keys within a namespace.
	Group string
	// Proof challenge
	Nonce *string
	// Type of signature.For sd-jwt is it automatically selected.
	SignatureType string
	// identifies the format of the credential.
	Format string
	// Disclosed Attributes
	DisclosureFrame []string
	// audience
	Aud *string
}

type ServiceEndpoint struct {
	// did of the document
	ID string
	// type of endpoint
	Type string
	// Endpoint URL
	ServiceEndpoint string
}

// SignRequest is the payload type of the signer service Sign method.
type SignRequest struct {
	// Key namespace to be used for signing.
	Namespace string
	// Key to be used for signing.
	Key string
	// Data that must be signed, encoded as base64 string.
	Data string
	// Group identifies a group of keys within a namespace.
	Group string
}

// SignResult is the result type of the signer service Sign method.
type SignResult struct {
	// Signature encoded as base64 string.
	Signature string
}

// VerificationMethodRequest is the payload type of the signer service
// VerificationMethod method.
type VerificationMethodRequest struct {
	// Key namespace.
	Namespace string
	// Name of requested key.
	Key string
	// DID controller of the key.
	Did string
	// Group identifies a group of keys within a namespace.
	Group string
	// Engine which shall be used. Eg transit or transit;kv or kv
	Engine string
}

// VerificationMethodsRequest is the payload type of the signer service
// VerificationMethods method.
type VerificationMethodsRequest struct {
	// Keys namespace.
	Namespace string
	// DID controller of the keys.
	Did string
	// Group identifies a group of keys within a namespace.
	Group string
	// Engine which shall be used. Eg transit or transit;kv or kv
	Engine string
}

// VerifyCredentialRequest is the payload type of the signer service
// VerifyCredential method.
type VerifyCredentialRequest struct {
	// Verifiable Credential in JSON format.
	Credential []byte
	// format
	XFormat string
	// Namespace for status check
	XNamespace *string
	// Group for status check
	XGroup *string
	// Disclosed Attributes
	DisclosureFrame []string
}

// VerifyPresentationRequest is the payload type of the signer service
// VerifyPresentation method.
type VerifyPresentationRequest struct {
	// Verifiable Presentation in JSON or sdjwt format.
	Presentation []byte
	// Disclosed Attributes
	DisclosureFrame []string
	// format
	XFormat string
	// expected audience
	Aud *string
	// expected nonce
	Nonce *string
}

// VerifyResult is the result type of the signer service VerifyCredential
// method.
type VerifyResult struct {
	// Valid specifies if the proof is successfully verified.
	Valid bool
	// Disclosed Credential
	DisclosedCredential any
}
