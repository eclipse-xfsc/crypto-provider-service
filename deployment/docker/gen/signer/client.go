// Code generated by goa v3.12.3, DO NOT EDIT.
//
// signer client
//
// Command:
// $ goa gen github.com/eclipse-xfsc/crypto-provider-service/design

package signer

import (
	"context"

	goa "goa.design/goa/v3/pkg"
)

// Client is the "signer" service client.
type Client struct {
	NamespacesEndpoint          goa.Endpoint
	NamespaceKeysEndpoint       goa.Endpoint
	VerificationMethodEndpoint  goa.Endpoint
	VerificationMethodsEndpoint goa.Endpoint
	JwkPublicKeyEndpoint        goa.Endpoint
	CredentialProofEndpoint     goa.Endpoint
	PresentationProofEndpoint   goa.Endpoint
	CreateCredentialEndpoint    goa.Endpoint
	CreatePresentationEndpoint  goa.Endpoint
	VerifyCredentialEndpoint    goa.Endpoint
	VerifyPresentationEndpoint  goa.Endpoint
	SignEndpoint                goa.Endpoint
	DidDocEndpoint              goa.Endpoint
	DidListEndpoint             goa.Endpoint
	DidConfigurationEndpoint    goa.Endpoint
	JwksEndpoint                goa.Endpoint
}

// NewClient initializes a "signer" service client given the endpoints.
func NewClient(namespaces, namespaceKeys, verificationMethod, verificationMethods, jwkPublicKey, credentialProof, presentationProof, createCredential, createPresentation, verifyCredential, verifyPresentation, sign, didDoc, didList, didConfiguration, jwks goa.Endpoint) *Client {
	return &Client{
		NamespacesEndpoint:          namespaces,
		NamespaceKeysEndpoint:       namespaceKeys,
		VerificationMethodEndpoint:  verificationMethod,
		VerificationMethodsEndpoint: verificationMethods,
		JwkPublicKeyEndpoint:        jwkPublicKey,
		CredentialProofEndpoint:     credentialProof,
		PresentationProofEndpoint:   presentationProof,
		CreateCredentialEndpoint:    createCredential,
		CreatePresentationEndpoint:  createPresentation,
		VerifyCredentialEndpoint:    verifyCredential,
		VerifyPresentationEndpoint:  verifyPresentation,
		SignEndpoint:                sign,
		DidDocEndpoint:              didDoc,
		DidListEndpoint:             didList,
		DidConfigurationEndpoint:    didConfiguration,
		JwksEndpoint:                jwks,
	}
}

// Namespaces calls the "Namespaces" endpoint of the "signer" service.
func (c *Client) Namespaces(ctx context.Context) (res []string, err error) {
	var ires any
	ires, err = c.NamespacesEndpoint(ctx, nil)
	if err != nil {
		return
	}
	return ires.([]string), nil
}

// NamespaceKeys calls the "NamespaceKeys" endpoint of the "signer" service.
func (c *Client) NamespaceKeys(ctx context.Context, p *NamespaceKeysRequest) (res []string, err error) {
	var ires any
	ires, err = c.NamespaceKeysEndpoint(ctx, p)
	if err != nil {
		return
	}
	return ires.([]string), nil
}

// VerificationMethod calls the "VerificationMethod" endpoint of the "signer"
// service.
func (c *Client) VerificationMethod(ctx context.Context, p *VerificationMethodRequest) (res *DIDVerificationMethod, err error) {
	var ires any
	ires, err = c.VerificationMethodEndpoint(ctx, p)
	if err != nil {
		return
	}
	return ires.(*DIDVerificationMethod), nil
}

// VerificationMethods calls the "VerificationMethods" endpoint of the "signer"
// service.
func (c *Client) VerificationMethods(ctx context.Context, p *VerificationMethodsRequest) (res []*DIDVerificationMethod, err error) {
	var ires any
	ires, err = c.VerificationMethodsEndpoint(ctx, p)
	if err != nil {
		return
	}
	return ires.([]*DIDVerificationMethod), nil
}

// JwkPublicKey calls the "JwkPublicKey" endpoint of the "signer" service.
func (c *Client) JwkPublicKey(ctx context.Context, p *JwkPublicKeyRequest) (res any, err error) {
	var ires any
	ires, err = c.JwkPublicKeyEndpoint(ctx, p)
	if err != nil {
		return
	}
	return ires.(any), nil
}

// CredentialProof calls the "CredentialProof" endpoint of the "signer" service.
func (c *Client) CredentialProof(ctx context.Context, p *CredentialProofRequest) (res any, err error) {
	var ires any
	ires, err = c.CredentialProofEndpoint(ctx, p)
	if err != nil {
		return
	}
	return ires.(any), nil
}

// PresentationProof calls the "PresentationProof" endpoint of the "signer"
// service.
func (c *Client) PresentationProof(ctx context.Context, p *PresentationProofRequest) (res any, err error) {
	var ires any
	ires, err = c.PresentationProofEndpoint(ctx, p)
	if err != nil {
		return
	}
	return ires.(any), nil
}

// CreateCredential calls the "CreateCredential" endpoint of the "signer"
// service.
func (c *Client) CreateCredential(ctx context.Context, p *CreateCredentialRequest) (res any, err error) {
	var ires any
	ires, err = c.CreateCredentialEndpoint(ctx, p)
	if err != nil {
		return
	}
	return ires.(any), nil
}

// CreatePresentation calls the "CreatePresentation" endpoint of the "signer"
// service.
func (c *Client) CreatePresentation(ctx context.Context, p *CreatePresentationRequest) (res any, err error) {
	var ires any
	ires, err = c.CreatePresentationEndpoint(ctx, p)
	if err != nil {
		return
	}
	return ires.(any), nil
}

// VerifyCredential calls the "VerifyCredential" endpoint of the "signer"
// service.
func (c *Client) VerifyCredential(ctx context.Context, p *VerifyCredentialRequest) (res *VerifyResult, err error) {
	var ires any
	ires, err = c.VerifyCredentialEndpoint(ctx, p)
	if err != nil {
		return
	}
	return ires.(*VerifyResult), nil
}

// VerifyPresentation calls the "VerifyPresentation" endpoint of the "signer"
// service.
func (c *Client) VerifyPresentation(ctx context.Context, p *VerifyPresentationRequest) (res *VerifyResult, err error) {
	var ires any
	ires, err = c.VerifyPresentationEndpoint(ctx, p)
	if err != nil {
		return
	}
	return ires.(*VerifyResult), nil
}

// Sign calls the "Sign" endpoint of the "signer" service.
func (c *Client) Sign(ctx context.Context, p *SignRequest) (res *SignResult, err error) {
	var ires any
	ires, err = c.SignEndpoint(ctx, p)
	if err != nil {
		return
	}
	return ires.(*SignResult), nil
}

// DidDoc calls the "didDoc" endpoint of the "signer" service.
func (c *Client) DidDoc(ctx context.Context, p *DidRequest) (res *DidResponse, err error) {
	var ires any
	ires, err = c.DidDocEndpoint(ctx, p)
	if err != nil {
		return
	}
	return ires.(*DidResponse), nil
}

// DidList calls the "didList" endpoint of the "signer" service.
func (c *Client) DidList(ctx context.Context, p *DidListRequest) (res *DidListResponse, err error) {
	var ires any
	ires, err = c.DidListEndpoint(ctx, p)
	if err != nil {
		return
	}
	return ires.(*DidListResponse), nil
}

// DidConfiguration calls the "DidConfiguration" endpoint of the "signer"
// service.
func (c *Client) DidConfiguration(ctx context.Context, p *DidConfiguration2) (res any, err error) {
	var ires any
	ires, err = c.DidConfigurationEndpoint(ctx, p)
	if err != nil {
		return
	}
	return ires.(any), nil
}

// Jwks calls the "Jwks" endpoint of the "signer" service.
func (c *Client) Jwks(ctx context.Context, p *JwksRequest) (res *JwksResponse, err error) {
	var ires any
	ires, err = c.JwksEndpoint(ctx, p)
	if err != nil {
		return
	}
	return ires.(*JwksResponse), nil
}
