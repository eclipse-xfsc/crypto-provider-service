// Code generated by goa v3.12.3, DO NOT EDIT.
//
// signer client HTTP transport
//
// Command:
// $ goa gen github.com/eclipse-xfsc/crypto-provider-service/design

package client

import (
	"context"
	"net/http"

	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// Client lists the signer service endpoint HTTP clients.
type Client struct {
	// Namespaces Doer is the HTTP client used to make requests to the Namespaces
	// endpoint.
	NamespacesDoer goahttp.Doer

	// NamespaceKeys Doer is the HTTP client used to make requests to the
	// NamespaceKeys endpoint.
	NamespaceKeysDoer goahttp.Doer

	// VerificationMethod Doer is the HTTP client used to make requests to the
	// VerificationMethod endpoint.
	VerificationMethodDoer goahttp.Doer

	// VerificationMethods Doer is the HTTP client used to make requests to the
	// VerificationMethods endpoint.
	VerificationMethodsDoer goahttp.Doer

	// JwkPublicKey Doer is the HTTP client used to make requests to the
	// JwkPublicKey endpoint.
	JwkPublicKeyDoer goahttp.Doer

	// CredentialProof Doer is the HTTP client used to make requests to the
	// CredentialProof endpoint.
	CredentialProofDoer goahttp.Doer

	// PresentationProof Doer is the HTTP client used to make requests to the
	// PresentationProof endpoint.
	PresentationProofDoer goahttp.Doer

	// CreateCredential Doer is the HTTP client used to make requests to the
	// CreateCredential endpoint.
	CreateCredentialDoer goahttp.Doer

	// CreatePresentation Doer is the HTTP client used to make requests to the
	// CreatePresentation endpoint.
	CreatePresentationDoer goahttp.Doer

	// VerifyCredential Doer is the HTTP client used to make requests to the
	// VerifyCredential endpoint.
	VerifyCredentialDoer goahttp.Doer

	// VerifyPresentation Doer is the HTTP client used to make requests to the
	// VerifyPresentation endpoint.
	VerifyPresentationDoer goahttp.Doer

	// Sign Doer is the HTTP client used to make requests to the Sign endpoint.
	SignDoer goahttp.Doer

	// DidDoc Doer is the HTTP client used to make requests to the didDoc endpoint.
	DidDocDoer goahttp.Doer

	// DidList Doer is the HTTP client used to make requests to the didList
	// endpoint.
	DidListDoer goahttp.Doer

	// DidConfiguration Doer is the HTTP client used to make requests to the
	// DidConfiguration endpoint.
	DidConfigurationDoer goahttp.Doer

	// Jwks Doer is the HTTP client used to make requests to the Jwks endpoint.
	JwksDoer goahttp.Doer

	// RestoreResponseBody controls whether the response bodies are reset after
	// decoding so they can be read again.
	RestoreResponseBody bool

	scheme  string
	host    string
	encoder func(*http.Request) goahttp.Encoder
	decoder func(*http.Response) goahttp.Decoder
}

// NewClient instantiates HTTP clients for all the signer service servers.
func NewClient(
	scheme string,
	host string,
	doer goahttp.Doer,
	enc func(*http.Request) goahttp.Encoder,
	dec func(*http.Response) goahttp.Decoder,
	restoreBody bool,
) *Client {
	return &Client{
		NamespacesDoer:          doer,
		NamespaceKeysDoer:       doer,
		VerificationMethodDoer:  doer,
		VerificationMethodsDoer: doer,
		JwkPublicKeyDoer:        doer,
		CredentialProofDoer:     doer,
		PresentationProofDoer:   doer,
		CreateCredentialDoer:    doer,
		CreatePresentationDoer:  doer,
		VerifyCredentialDoer:    doer,
		VerifyPresentationDoer:  doer,
		SignDoer:                doer,
		DidDocDoer:              doer,
		DidListDoer:             doer,
		DidConfigurationDoer:    doer,
		JwksDoer:                doer,
		RestoreResponseBody:     restoreBody,
		scheme:                  scheme,
		host:                    host,
		decoder:                 dec,
		encoder:                 enc,
	}
}

// Namespaces returns an endpoint that makes HTTP requests to the signer
// service Namespaces server.
func (c *Client) Namespaces() goa.Endpoint {
	var (
		decodeResponse = DecodeNamespacesResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v any) (any, error) {
		req, err := c.BuildNamespacesRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.NamespacesDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("signer", "Namespaces", err)
		}
		return decodeResponse(resp)
	}
}

// NamespaceKeys returns an endpoint that makes HTTP requests to the signer
// service NamespaceKeys server.
func (c *Client) NamespaceKeys() goa.Endpoint {
	var (
		encodeRequest  = EncodeNamespaceKeysRequest(c.encoder)
		decodeResponse = DecodeNamespaceKeysResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v any) (any, error) {
		req, err := c.BuildNamespaceKeysRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.NamespaceKeysDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("signer", "NamespaceKeys", err)
		}
		return decodeResponse(resp)
	}
}

// VerificationMethod returns an endpoint that makes HTTP requests to the
// signer service VerificationMethod server.
func (c *Client) VerificationMethod() goa.Endpoint {
	var (
		encodeRequest  = EncodeVerificationMethodRequest(c.encoder)
		decodeResponse = DecodeVerificationMethodResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v any) (any, error) {
		req, err := c.BuildVerificationMethodRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.VerificationMethodDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("signer", "VerificationMethod", err)
		}
		return decodeResponse(resp)
	}
}

// VerificationMethods returns an endpoint that makes HTTP requests to the
// signer service VerificationMethods server.
func (c *Client) VerificationMethods() goa.Endpoint {
	var (
		encodeRequest  = EncodeVerificationMethodsRequest(c.encoder)
		decodeResponse = DecodeVerificationMethodsResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v any) (any, error) {
		req, err := c.BuildVerificationMethodsRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.VerificationMethodsDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("signer", "VerificationMethods", err)
		}
		return decodeResponse(resp)
	}
}

// JwkPublicKey returns an endpoint that makes HTTP requests to the signer
// service JwkPublicKey server.
func (c *Client) JwkPublicKey() goa.Endpoint {
	var (
		encodeRequest  = EncodeJwkPublicKeyRequest(c.encoder)
		decodeResponse = DecodeJwkPublicKeyResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v any) (any, error) {
		req, err := c.BuildJwkPublicKeyRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.JwkPublicKeyDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("signer", "JwkPublicKey", err)
		}
		return decodeResponse(resp)
	}
}

// CredentialProof returns an endpoint that makes HTTP requests to the signer
// service CredentialProof server.
func (c *Client) CredentialProof() goa.Endpoint {
	var (
		encodeRequest  = EncodeCredentialProofRequest(c.encoder)
		decodeResponse = DecodeCredentialProofResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v any) (any, error) {
		req, err := c.BuildCredentialProofRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.CredentialProofDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("signer", "CredentialProof", err)
		}
		return decodeResponse(resp)
	}
}

// PresentationProof returns an endpoint that makes HTTP requests to the signer
// service PresentationProof server.
func (c *Client) PresentationProof() goa.Endpoint {
	var (
		encodeRequest  = EncodePresentationProofRequest(c.encoder)
		decodeResponse = DecodePresentationProofResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v any) (any, error) {
		req, err := c.BuildPresentationProofRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.PresentationProofDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("signer", "PresentationProof", err)
		}
		return decodeResponse(resp)
	}
}

// CreateCredential returns an endpoint that makes HTTP requests to the signer
// service CreateCredential server.
func (c *Client) CreateCredential() goa.Endpoint {
	var (
		encodeRequest  = EncodeCreateCredentialRequest(c.encoder)
		decodeResponse = DecodeCreateCredentialResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v any) (any, error) {
		req, err := c.BuildCreateCredentialRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.CreateCredentialDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("signer", "CreateCredential", err)
		}
		return decodeResponse(resp)
	}
}

// CreatePresentation returns an endpoint that makes HTTP requests to the
// signer service CreatePresentation server.
func (c *Client) CreatePresentation() goa.Endpoint {
	var (
		encodeRequest  = EncodeCreatePresentationRequest(c.encoder)
		decodeResponse = DecodeCreatePresentationResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v any) (any, error) {
		req, err := c.BuildCreatePresentationRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.CreatePresentationDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("signer", "CreatePresentation", err)
		}
		return decodeResponse(resp)
	}
}

// VerifyCredential returns an endpoint that makes HTTP requests to the signer
// service VerifyCredential server.
func (c *Client) VerifyCredential() goa.Endpoint {
	var (
		encodeRequest  = EncodeVerifyCredentialRequest(c.encoder)
		decodeResponse = DecodeVerifyCredentialResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v any) (any, error) {
		req, err := c.BuildVerifyCredentialRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.VerifyCredentialDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("signer", "VerifyCredential", err)
		}
		return decodeResponse(resp)
	}
}

// VerifyPresentation returns an endpoint that makes HTTP requests to the
// signer service VerifyPresentation server.
func (c *Client) VerifyPresentation() goa.Endpoint {
	var (
		encodeRequest  = EncodeVerifyPresentationRequest(c.encoder)
		decodeResponse = DecodeVerifyPresentationResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v any) (any, error) {
		req, err := c.BuildVerifyPresentationRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.VerifyPresentationDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("signer", "VerifyPresentation", err)
		}
		return decodeResponse(resp)
	}
}

// Sign returns an endpoint that makes HTTP requests to the signer service Sign
// server.
func (c *Client) Sign() goa.Endpoint {
	var (
		encodeRequest  = EncodeSignRequest(c.encoder)
		decodeResponse = DecodeSignResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v any) (any, error) {
		req, err := c.BuildSignRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.SignDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("signer", "Sign", err)
		}
		return decodeResponse(resp)
	}
}

// DidDoc returns an endpoint that makes HTTP requests to the signer service
// didDoc server.
func (c *Client) DidDoc() goa.Endpoint {
	var (
		encodeRequest  = EncodeDidDocRequest(c.encoder)
		decodeResponse = DecodeDidDocResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v any) (any, error) {
		req, err := c.BuildDidDocRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.DidDocDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("signer", "didDoc", err)
		}
		return decodeResponse(resp)
	}
}

// DidList returns an endpoint that makes HTTP requests to the signer service
// didList server.
func (c *Client) DidList() goa.Endpoint {
	var (
		encodeRequest  = EncodeDidListRequest(c.encoder)
		decodeResponse = DecodeDidListResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v any) (any, error) {
		req, err := c.BuildDidListRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.DidListDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("signer", "didList", err)
		}
		return decodeResponse(resp)
	}
}

// DidConfiguration returns an endpoint that makes HTTP requests to the signer
// service DidConfiguration server.
func (c *Client) DidConfiguration() goa.Endpoint {
	var (
		encodeRequest  = EncodeDidConfigurationRequest(c.encoder)
		decodeResponse = DecodeDidConfigurationResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v any) (any, error) {
		req, err := c.BuildDidConfigurationRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.DidConfigurationDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("signer", "DidConfiguration", err)
		}
		return decodeResponse(resp)
	}
}

// Jwks returns an endpoint that makes HTTP requests to the signer service Jwks
// server.
func (c *Client) Jwks() goa.Endpoint {
	var (
		encodeRequest  = EncodeJwksRequest(c.encoder)
		decodeResponse = DecodeJwksResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v any) (any, error) {
		req, err := c.BuildJwksRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.JwksDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("signer", "Jwks", err)
		}
		return decodeResponse(resp)
	}
}
