// Code generated by goa v3.12.3, DO NOT EDIT.
//
// signer HTTP client CLI support package
//
// Command:
// $ goa gen github.com/eclipse-xfsc/crypto-provider-service/design

package cli

import (
	"flag"
	"fmt"
	"net/http"
	"os"

	healthc "github.com/eclipse-xfsc/crypto-provider-service/deployment/docker/gen/http/health/client"
	signerc "github.com/eclipse-xfsc/crypto-provider-service/deployment/docker/gen/http/signer/client"
	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// UsageCommands returns the set of commands and sub-commands using the format
//
//	command (subcommand1|subcommand2|...)
func UsageCommands() string {
	return `health (liveness|readiness)
signer (namespaces|namespace-keys|verification-method|verification-methods|jwk-public-key|credential-proof|presentation-proof|create-credential|create-presentation|verify-credential|verify-presentation|sign|did-doc|did-list|did-configuration|jwks)
`
}

// UsageExamples produces an example of a valid invocation of the CLI tool.
func UsageExamples() string {
	return os.Args[0] + ` health liveness` + "\n" +
		os.Args[0] + ` signer namespaces` + "\n" +
		""
}

// ParseEndpoint returns the endpoint and payload as specified on the command
// line.
func ParseEndpoint(
	scheme, host string,
	doer goahttp.Doer,
	enc func(*http.Request) goahttp.Encoder,
	dec func(*http.Response) goahttp.Decoder,
	restore bool,
) (goa.Endpoint, any, error) {
	var (
		healthFlags = flag.NewFlagSet("health", flag.ContinueOnError)

		healthLivenessFlags = flag.NewFlagSet("liveness", flag.ExitOnError)

		healthReadinessFlags = flag.NewFlagSet("readiness", flag.ExitOnError)

		signerFlags = flag.NewFlagSet("signer", flag.ContinueOnError)

		signerNamespacesFlags = flag.NewFlagSet("namespaces", flag.ExitOnError)

		signerNamespaceKeysFlags         = flag.NewFlagSet("namespace-keys", flag.ExitOnError)
		signerNamespaceKeysNamespaceFlag = signerNamespaceKeysFlags.String("namespace", "REQUIRED", "Namespace for signing keys.")
		signerNamespaceKeysXGroupFlag    = signerNamespaceKeysFlags.String("x-group", "", "")

		signerVerificationMethodFlags         = flag.NewFlagSet("verification-method", flag.ExitOnError)
		signerVerificationMethodBodyFlag      = signerVerificationMethodFlags.String("body", "REQUIRED", "")
		signerVerificationMethodNamespaceFlag = signerVerificationMethodFlags.String("namespace", "REQUIRED", "Key namespace.")
		signerVerificationMethodKeyFlag       = signerVerificationMethodFlags.String("key", "REQUIRED", "Name of requested key.")
		signerVerificationMethodDidFlag       = signerVerificationMethodFlags.String("did", "REQUIRED", "DID controller of the key.")

		signerVerificationMethodsFlags         = flag.NewFlagSet("verification-methods", flag.ExitOnError)
		signerVerificationMethodsBodyFlag      = signerVerificationMethodsFlags.String("body", "REQUIRED", "")
		signerVerificationMethodsNamespaceFlag = signerVerificationMethodsFlags.String("namespace", "REQUIRED", "Keys namespace.")
		signerVerificationMethodsDidFlag       = signerVerificationMethodsFlags.String("did", "REQUIRED", "DID controller of the keys.")

		signerJwkPublicKeyFlags         = flag.NewFlagSet("jwk-public-key", flag.ExitOnError)
		signerJwkPublicKeyBodyFlag      = signerJwkPublicKeyFlags.String("body", "REQUIRED", "")
		signerJwkPublicKeyNamespaceFlag = signerJwkPublicKeyFlags.String("namespace", "REQUIRED", "Key namespace.")
		signerJwkPublicKeyKeyFlag       = signerJwkPublicKeyFlags.String("key", "REQUIRED", "Key name.")

		signerCredentialProofFlags    = flag.NewFlagSet("credential-proof", flag.ExitOnError)
		signerCredentialProofBodyFlag = signerCredentialProofFlags.String("body", "REQUIRED", "")

		signerPresentationProofFlags    = flag.NewFlagSet("presentation-proof", flag.ExitOnError)
		signerPresentationProofBodyFlag = signerPresentationProofFlags.String("body", "REQUIRED", "")

		signerCreateCredentialFlags       = flag.NewFlagSet("create-credential", flag.ExitOnError)
		signerCreateCredentialBodyFlag    = signerCreateCredentialFlags.String("body", "REQUIRED", "")
		signerCreateCredentialXOriginFlag = signerCreateCredentialFlags.String("x-origin", "REQUIRED", "")

		signerCreatePresentationFlags    = flag.NewFlagSet("create-presentation", flag.ExitOnError)
		signerCreatePresentationBodyFlag = signerCreatePresentationFlags.String("body", "REQUIRED", "")

		signerVerifyCredentialFlags          = flag.NewFlagSet("verify-credential", flag.ExitOnError)
		signerVerifyCredentialBodyFlag       = signerVerifyCredentialFlags.String("body", "REQUIRED", "")
		signerVerifyCredentialXFormatFlag    = signerVerifyCredentialFlags.String("x-format", "ldp_vc", "")
		signerVerifyCredentialXNamespaceFlag = signerVerifyCredentialFlags.String("x-namespace", "", "")
		signerVerifyCredentialXGroupFlag     = signerVerifyCredentialFlags.String("x-group", "", "")

		signerVerifyPresentationFlags       = flag.NewFlagSet("verify-presentation", flag.ExitOnError)
		signerVerifyPresentationBodyFlag    = signerVerifyPresentationFlags.String("body", "REQUIRED", "")
		signerVerifyPresentationXFormatFlag = signerVerifyPresentationFlags.String("x-format", "ldp_vc", "")

		signerSignFlags    = flag.NewFlagSet("sign", flag.ExitOnError)
		signerSignBodyFlag = signerSignFlags.String("body", "REQUIRED", "")

		signerDidDocFlags          = flag.NewFlagSet("did-doc", flag.ExitOnError)
		signerDidDocXNamespaceFlag = signerDidDocFlags.String("x-namespace", "transit", "")
		signerDidDocXGroupFlag     = signerDidDocFlags.String("x-group", "", "")
		signerDidDocXDidFlag       = signerDidDocFlags.String("x-did", "did:web:localhost%3A:8080", "")
		signerDidDocXEngineFlag    = signerDidDocFlags.String("x-engine", "transit", "")

		signerDidListFlags          = flag.NewFlagSet("did-list", flag.ExitOnError)
		signerDidListXNamespaceFlag = signerDidListFlags.String("x-namespace", "REQUIRED", "")
		signerDidListXGroupFlag     = signerDidListFlags.String("x-group", "", "")
		signerDidListXEngineFlag    = signerDidListFlags.String("x-engine", "transit", "")

		signerDidConfigurationFlags          = flag.NewFlagSet("did-configuration", flag.ExitOnError)
		signerDidConfigurationBodyFlag       = signerDidConfigurationFlags.String("body", "REQUIRED", "")
		signerDidConfigurationXNamespaceFlag = signerDidConfigurationFlags.String("x-namespace", "REQUIRED", "")
		signerDidConfigurationXGroupFlag     = signerDidConfigurationFlags.String("x-group", "", "")
		signerDidConfigurationXOriginFlag    = signerDidConfigurationFlags.String("x-origin", "REQUIRED", "")
		signerDidConfigurationXDidFlag       = signerDidConfigurationFlags.String("x-did", "", "")
		signerDidConfigurationXNonceFlag     = signerDidConfigurationFlags.String("x-nonce", "", "")

		signerJwksFlags          = flag.NewFlagSet("jwks", flag.ExitOnError)
		signerJwksXNamespaceFlag = signerJwksFlags.String("x-namespace", "REQUIRED", "")
		signerJwksXGroupFlag     = signerJwksFlags.String("x-group", "", "")
		signerJwksXEngineFlag    = signerJwksFlags.String("x-engine", "transit", "")
	)
	healthFlags.Usage = healthUsage
	healthLivenessFlags.Usage = healthLivenessUsage
	healthReadinessFlags.Usage = healthReadinessUsage

	signerFlags.Usage = signerUsage
	signerNamespacesFlags.Usage = signerNamespacesUsage
	signerNamespaceKeysFlags.Usage = signerNamespaceKeysUsage
	signerVerificationMethodFlags.Usage = signerVerificationMethodUsage
	signerVerificationMethodsFlags.Usage = signerVerificationMethodsUsage
	signerJwkPublicKeyFlags.Usage = signerJwkPublicKeyUsage
	signerCredentialProofFlags.Usage = signerCredentialProofUsage
	signerPresentationProofFlags.Usage = signerPresentationProofUsage
	signerCreateCredentialFlags.Usage = signerCreateCredentialUsage
	signerCreatePresentationFlags.Usage = signerCreatePresentationUsage
	signerVerifyCredentialFlags.Usage = signerVerifyCredentialUsage
	signerVerifyPresentationFlags.Usage = signerVerifyPresentationUsage
	signerSignFlags.Usage = signerSignUsage
	signerDidDocFlags.Usage = signerDidDocUsage
	signerDidListFlags.Usage = signerDidListUsage
	signerDidConfigurationFlags.Usage = signerDidConfigurationUsage
	signerJwksFlags.Usage = signerJwksUsage

	if err := flag.CommandLine.Parse(os.Args[1:]); err != nil {
		return nil, nil, err
	}

	if flag.NArg() < 2 { // two non flag args are required: SERVICE and ENDPOINT (aka COMMAND)
		return nil, nil, fmt.Errorf("not enough arguments")
	}

	var (
		svcn string
		svcf *flag.FlagSet
	)
	{
		svcn = flag.Arg(0)
		switch svcn {
		case "health":
			svcf = healthFlags
		case "signer":
			svcf = signerFlags
		default:
			return nil, nil, fmt.Errorf("unknown service %q", svcn)
		}
	}
	if err := svcf.Parse(flag.Args()[1:]); err != nil {
		return nil, nil, err
	}

	var (
		epn string
		epf *flag.FlagSet
	)
	{
		epn = svcf.Arg(0)
		switch svcn {
		case "health":
			switch epn {
			case "liveness":
				epf = healthLivenessFlags

			case "readiness":
				epf = healthReadinessFlags

			}

		case "signer":
			switch epn {
			case "namespaces":
				epf = signerNamespacesFlags

			case "namespace-keys":
				epf = signerNamespaceKeysFlags

			case "verification-method":
				epf = signerVerificationMethodFlags

			case "verification-methods":
				epf = signerVerificationMethodsFlags

			case "jwk-public-key":
				epf = signerJwkPublicKeyFlags

			case "credential-proof":
				epf = signerCredentialProofFlags

			case "presentation-proof":
				epf = signerPresentationProofFlags

			case "create-credential":
				epf = signerCreateCredentialFlags

			case "create-presentation":
				epf = signerCreatePresentationFlags

			case "verify-credential":
				epf = signerVerifyCredentialFlags

			case "verify-presentation":
				epf = signerVerifyPresentationFlags

			case "sign":
				epf = signerSignFlags

			case "did-doc":
				epf = signerDidDocFlags

			case "did-list":
				epf = signerDidListFlags

			case "did-configuration":
				epf = signerDidConfigurationFlags

			case "jwks":
				epf = signerJwksFlags

			}

		}
	}
	if epf == nil {
		return nil, nil, fmt.Errorf("unknown %q endpoint %q", svcn, epn)
	}

	// Parse endpoint flags if any
	if svcf.NArg() > 1 {
		if err := epf.Parse(svcf.Args()[1:]); err != nil {
			return nil, nil, err
		}
	}

	var (
		data     any
		endpoint goa.Endpoint
		err      error
	)
	{
		switch svcn {
		case "health":
			c := healthc.NewClient(scheme, host, doer, enc, dec, restore)
			switch epn {
			case "liveness":
				endpoint = c.Liveness()
				data = nil
			case "readiness":
				endpoint = c.Readiness()
				data = nil
			}
		case "signer":
			c := signerc.NewClient(scheme, host, doer, enc, dec, restore)
			switch epn {
			case "namespaces":
				endpoint = c.Namespaces()
				data = nil
			case "namespace-keys":
				endpoint = c.NamespaceKeys()
				data, err = signerc.BuildNamespaceKeysPayload(*signerNamespaceKeysNamespaceFlag, *signerNamespaceKeysXGroupFlag)
			case "verification-method":
				endpoint = c.VerificationMethod()
				data, err = signerc.BuildVerificationMethodPayload(*signerVerificationMethodBodyFlag, *signerVerificationMethodNamespaceFlag, *signerVerificationMethodKeyFlag, *signerVerificationMethodDidFlag)
			case "verification-methods":
				endpoint = c.VerificationMethods()
				data, err = signerc.BuildVerificationMethodsPayload(*signerVerificationMethodsBodyFlag, *signerVerificationMethodsNamespaceFlag, *signerVerificationMethodsDidFlag)
			case "jwk-public-key":
				endpoint = c.JwkPublicKey()
				data, err = signerc.BuildJwkPublicKeyPayload(*signerJwkPublicKeyBodyFlag, *signerJwkPublicKeyNamespaceFlag, *signerJwkPublicKeyKeyFlag)
			case "credential-proof":
				endpoint = c.CredentialProof()
				data, err = signerc.BuildCredentialProofPayload(*signerCredentialProofBodyFlag)
			case "presentation-proof":
				endpoint = c.PresentationProof()
				data, err = signerc.BuildPresentationProofPayload(*signerPresentationProofBodyFlag)
			case "create-credential":
				endpoint = c.CreateCredential()
				data, err = signerc.BuildCreateCredentialPayload(*signerCreateCredentialBodyFlag, *signerCreateCredentialXOriginFlag)
			case "create-presentation":
				endpoint = c.CreatePresentation()
				data, err = signerc.BuildCreatePresentationPayload(*signerCreatePresentationBodyFlag)
			case "verify-credential":
				endpoint = c.VerifyCredential()
				data, err = signerc.BuildVerifyCredentialPayload(*signerVerifyCredentialBodyFlag, *signerVerifyCredentialXFormatFlag, *signerVerifyCredentialXNamespaceFlag, *signerVerifyCredentialXGroupFlag)
			case "verify-presentation":
				endpoint = c.VerifyPresentation()
				data, err = signerc.BuildVerifyPresentationPayload(*signerVerifyPresentationBodyFlag, *signerVerifyPresentationXFormatFlag)
			case "sign":
				endpoint = c.Sign()
				data, err = signerc.BuildSignPayload(*signerSignBodyFlag)
			case "did-doc":
				endpoint = c.DidDoc()
				data, err = signerc.BuildDidDocPayload(*signerDidDocXNamespaceFlag, *signerDidDocXGroupFlag, *signerDidDocXDidFlag, *signerDidDocXEngineFlag)
			case "did-list":
				endpoint = c.DidList()
				data, err = signerc.BuildDidListPayload(*signerDidListXNamespaceFlag, *signerDidListXGroupFlag, *signerDidListXEngineFlag)
			case "did-configuration":
				endpoint = c.DidConfiguration()
				data, err = signerc.BuildDidConfigurationPayload(*signerDidConfigurationBodyFlag, *signerDidConfigurationXNamespaceFlag, *signerDidConfigurationXGroupFlag, *signerDidConfigurationXOriginFlag, *signerDidConfigurationXDidFlag, *signerDidConfigurationXNonceFlag)
			case "jwks":
				endpoint = c.Jwks()
				data, err = signerc.BuildJwksPayload(*signerJwksXNamespaceFlag, *signerJwksXGroupFlag, *signerJwksXEngineFlag)
			}
		}
	}
	if err != nil {
		return nil, nil, err
	}

	return endpoint, data, nil
}

// healthUsage displays the usage of the health command and its subcommands.
func healthUsage() {
	fmt.Fprintf(os.Stderr, `Health service provides health check endpoints.
Usage:
    %[1]s [globalflags] health COMMAND [flags]

COMMAND:
    liveness: Liveness implements Liveness.
    readiness: Readiness implements Readiness.

Additional help:
    %[1]s health COMMAND --help
`, os.Args[0])
}
func healthLivenessUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] health liveness

Liveness implements Liveness.

Example:
    %[1]s health liveness
`, os.Args[0])
}

func healthReadinessUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] health readiness

Readiness implements Readiness.

Example:
    %[1]s health readiness
`, os.Args[0])
}

// signerUsage displays the usage of the signer command and its subcommands.
func signerUsage() {
	fmt.Fprintf(os.Stderr, `Signer service makes digital signatures and proofs for verifiable credentials and presentations.
Usage:
    %[1]s [globalflags] signer COMMAND [flags]

COMMAND:
    namespaces: Namespaces returns all keys namespaces, which corresponds to enabled Vault transit engines.
    namespace-keys: NamespaceKeys returns all keys in a given namespace.
    verification-method: VerificationMethod returns a single public key formatted as DID verification method for a given namespace, key and did. When did:jwk is set for did, a did:jwk is generated from the key.
    verification-methods: VerificationMethods returns all public keys in a given namespace. The result is formatted as array of DID verification methods with their controller attribute being the given DID in the request.
    jwk-public-key: JwkPublicKey returns public key by name and namespace.
    credential-proof: CredentialProof adds a proof to a given Verifiable Credential.
    presentation-proof: PresentationProof adds a proof to a given Verifiable Presentation.
    create-credential: CreateCredential creates VC with proof from raw JSON data.
    create-presentation: CreatePresentation creates VP with proof from raw JSON data.
    verify-credential: VerifyCredential verifies the proof of a Verifiable Credential.
    verify-presentation: VerifyPresentation verifies the proof of a Verifiable Presentation.
    sign: Sign creates digital signature on base64 encoded binary data.
    did-doc: DidDoc implements didDoc.
    did-list: DidList implements didList.
    did-configuration: Creates did configuration.
    jwks: Jwks implements Jwks.

Additional help:
    %[1]s signer COMMAND --help
`, os.Args[0])
}
func signerNamespacesUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] signer namespaces

Namespaces returns all keys namespaces, which corresponds to enabled Vault transit engines.

Example:
    %[1]s signer namespaces
`, os.Args[0])
}

func signerNamespaceKeysUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] signer namespace-keys -namespace STRING -x-group STRING

NamespaceKeys returns all keys in a given namespace.
    -namespace STRING: Namespace for signing keys.
    -x-group STRING: 

Example:
    %[1]s signer namespace-keys --namespace "did:web:example.com" --x-group "Group"
`, os.Args[0])
}

func signerVerificationMethodUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] signer verification-method -body JSON -namespace STRING -key STRING -did STRING

VerificationMethod returns a single public key formatted as DID verification method for a given namespace, key and did. When did:jwk is set for did, a did:jwk is generated from the key.
    -body JSON: 
    -namespace STRING: Key namespace.
    -key STRING: Name of requested key.
    -did STRING: DID controller of the key.

Example:
    %[1]s signer verification-method --body '{
      "engine": "transit",
      "group": "Group"
   }' --namespace "transit" --key "key1" --did "did:web:example.com"
`, os.Args[0])
}

func signerVerificationMethodsUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] signer verification-methods -body JSON -namespace STRING -did STRING

VerificationMethods returns all public keys in a given namespace. The result is formatted as array of DID verification methods with their controller attribute being the given DID in the request.
    -body JSON: 
    -namespace STRING: Keys namespace.
    -did STRING: DID controller of the keys.

Example:
    %[1]s signer verification-methods --body '{
      "engine": "transit",
      "group": "Group"
   }' --namespace "transit" --did "did:web:example.com"
`, os.Args[0])
}

func signerJwkPublicKeyUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] signer jwk-public-key -body JSON -namespace STRING -key STRING

JwkPublicKey returns public key by name and namespace.
    -body JSON: 
    -namespace STRING: Key namespace.
    -key STRING: Key name.

Example:
    %[1]s signer jwk-public-key --body '{
      "engine": "transit",
      "group": "Group"
   }' --namespace "transit" --key "my-ecdsa-key1"
`, os.Args[0])
}

func signerCredentialProofUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] signer credential-proof -body JSON

CredentialProof adds a proof to a given Verifiable Credential.
    -body JSON: 

Example:
    %[1]s signer credential-proof --body '{
      "credential": {
         "@context": [
            "https://www.w3.org/2018/credentials/v1",
            "https://w3id.org/security/suites/jws-2020/v1",
            "https://schema.org"
         ],
         "type": [
            "VerifiableCredential"
         ],
         "issuer": "did:web:nginx:policy:policy:example:example:1.0:evaluation",
         "issuanceDate": "2010-01-01T19:23:24.651387237Z",
         "credentialSubject": {
            "name": "Alice",
            "allow": true
         }
      },
      "disclosureFrame": [
         "email"
      ],
      "format": "ldp_vc or vc+sd-jwt",
      "group": "Group",
      "key": "key1",
      "namespace": "transit",
      "nonce": "3483492392vvv-fff",
      "signatureType": "ed25519signature2020"
   }'
`, os.Args[0])
}

func signerPresentationProofUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] signer presentation-proof -body JSON

PresentationProof adds a proof to a given Verifiable Presentation.
    -body JSON: 

Example:
    %[1]s signer presentation-proof --body '{
      "aud": "http://...",
      "disclosureFrame": [
         "email"
      ],
      "format": "ldp_vc or vc+sd-jwt",
      "group": "Group",
      "issuer": "Aut et aut adipisci voluptatem consectetur quidem.",
      "key": "key1",
      "namespace": "transit",
      "nonce": "3483492392vvv-fff",
      "presentation": "Hic doloribus.",
      "signatureType": "ed25519signature2020"
   }'
`, os.Args[0])
}

func signerCreateCredentialUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] signer create-credential -body JSON -x-origin STRING

CreateCredential creates VC with proof from raw JSON data.
    -body JSON: 
    -x-origin STRING: 

Example:
    %[1]s signer create-credential --body '{
      "context": [
         "https://w3id.org/security/suites/jws-2020/v1",
         "https://schema.org"
      ],
      "credentialSubject": {
         "hello": "world"
      },
      "disclosureFrame": [
         "email"
      ],
      "format": "ldp_vc or vc+sd-jwt",
      "group": "Group",
      "holder": "urn:3333:ddd",
      "issuer": "did:web:example.com",
      "key": "key1",
      "namespace": "transit",
      "nonce": "3483492392vvv-fff",
      "signatureType": "ed25519signature2020",
      "status": true,
      "type": [
         "VerifiableCredential",
         "TestCredential]"
      ]
   }' --x-origin "https://test"
`, os.Args[0])
}

func signerCreatePresentationUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] signer create-presentation -body JSON

CreatePresentation creates VP with proof from raw JSON data.
    -body JSON: 

Example:
    %[1]s signer create-presentation --body '{
      "context": [
         "https://w3id.org/security/suites/jws-2020/v1",
         "https://schema.org"
      ],
      "data": [
         {
            "hello": "world"
         },
         {
            "hola": "mundo"
         }
      ],
      "group": "Group",
      "issuer": "did:web:example.com",
      "key": "key1",
      "namespace": "transit",
      "nonce": "3483492392vvv-fff",
      "signatureType": "ed25519signature2020"
   }'
`, os.Args[0])
}

func signerVerifyCredentialUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] signer verify-credential -body JSON -x-format STRING -x-namespace STRING -x-group STRING

VerifyCredential verifies the proof of a Verifiable Credential.
    -body JSON: 
    -x-format STRING: 
    -x-namespace STRING: 
    -x-group STRING: 

Example:
    %[1]s signer verify-credential --body '{
      "credential": "RWEgcXVhcyBwcmFlc2VudGl1bSB2b2x1cHRhcyBvY2NhZWNhdGkgZXN0IGZhY2VyZS4=",
      "disclosureFrame": [
         "email"
      ]
   }' --x-format "ldp_vc or vc+sd-jwt" --x-namespace "Dolores velit." --x-group "Tempore suscipit ut occaecati."
`, os.Args[0])
}

func signerVerifyPresentationUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] signer verify-presentation -body JSON -x-format STRING

VerifyPresentation verifies the proof of a Verifiable Presentation.
    -body JSON: 
    -x-format STRING: 

Example:
    %[1]s signer verify-presentation --body '{
      "aud": "Sit explicabo possimus ea accusantium.",
      "disclosureFrame": [
         "email"
      ],
      "nonce": "Ut velit.",
      "presentation": "RG9sb3JlcyBldCBuZXF1ZSBibGFuZGl0aWlzIG5vc3RydW0gbmloaWwgY29uc2VxdXVudHVyLg=="
   }' --x-format "ldp_vc or vc+sd-jwt"
`, os.Args[0])
}

func signerSignUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] signer sign -body JSON

Sign creates digital signature on base64 encoded binary data.
    -body JSON: 

Example:
    %[1]s signer sign --body '{
      "data": "Quis voluptas.",
      "group": "Group",
      "key": "Vel porro qui quidem unde.",
      "namespace": "Molestiae id vitae vel."
   }'
`, os.Args[0])
}

func signerDidDocUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] signer did-doc -x-namespace STRING -x-group STRING -x-did STRING -x-engine STRING

DidDoc implements didDoc.
    -x-namespace STRING: 
    -x-group STRING: 
    -x-did STRING: 
    -x-engine STRING: 

Example:
    %[1]s signer did-doc --x-namespace "Est occaecati nam." --x-group "Group" --x-did "exampl:com" --x-engine "transit"
`, os.Args[0])
}

func signerDidListUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] signer did-list -x-namespace STRING -x-group STRING -x-engine STRING

DidList implements didList.
    -x-namespace STRING: 
    -x-group STRING: 
    -x-engine STRING: 

Example:
    %[1]s signer did-list --x-namespace "Vero est aliquam aut totam quam." --x-group "Group" --x-engine "transit"
`, os.Args[0])
}

func signerDidConfigurationUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] signer did-configuration -body JSON -x-namespace STRING -x-group STRING -x-origin STRING -x-did STRING -x-nonce STRING

Creates did configuration.
    -body JSON: 
    -x-namespace STRING: 
    -x-group STRING: 
    -x-origin STRING: 
    -x-did STRING: 
    -x-nonce STRING: 

Example:
    %[1]s signer did-configuration --body '{
      "x-signatureType": "ed25519signature2020"
   }' --x-namespace "Debitis eius rerum veritatis delectus." --x-group "Group" --x-origin "Recusandae voluptatem est quos." --x-did "Sed sit voluptates nihil aspernatur ducimus eum." --x-nonce "3483492392vvv-fff"
`, os.Args[0])
}

func signerJwksUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] signer jwks -x-namespace STRING -x-group STRING -x-engine STRING

Jwks implements Jwks.
    -x-namespace STRING: 
    -x-group STRING: 
    -x-engine STRING: 

Example:
    %[1]s signer jwks --x-namespace "Expedita quos eligendi id." --x-group "Rerum esse ut error." --x-engine "transit"
`, os.Args[0])
}
